#!/usr/bin/env python
# -*- coding: iso-8859-1 -*-

import re
import codecs
from datetime import datetime
import sys
import argparse

## This is  not a common library, we better make sure you have it
try:
    import arff
except ImportError:
    print "[ERROR] No arff library install. Please install with \"pip install arff\""
    quit()

## Functions...
def parseFile(fileName,debug,log_year):
    """
    function that parse an auth.log file and makes an ARFF file compatible with Weka

    This functions reads the auth.log file generated by linux systems and extract 
    multiple information from it. Currently this function only extracts information
    regarding Authorization messages, Accept messages and reject messages. Additionally, 
    for each type of message other information might or mignt not be provided. output
    file example goes like this:
    @relation authLogs
    @attribute date string
    @attribute host string
    @attribute service string
    @attribute service pid string
    @attribute ID string
    @attribute log type string
    @attribute messagetype string
    @attribute accept type string
    @attribute user string
    @attribute ip string
    @data
    '2017-02-22 07:00:15',dilbert.eecis.udel.edu,sshd,26237,947420,auth.info,'refused','?','?',121.18.238.114
    '2017-02-22 08:26:16',dilbert.eecis.udel.edu,sshd,27526,800047,auth.info,'accepted',publickey,root,128.4.120.92

    Parameters
    ----------
    fileName : str
    auth.log fileName
    debug : str
    set this to yes if you want the function to print errors and warnings when parsing the files
    log_year : str
    auth.log does not contain the year. We want the date to be complete.

    """
    
    # Array of entries to dump
    values_to_dump = []
    f = codecs.open(fileName,'r',"ISO-8859-1")
    lineCounter = 0

    # For each line in the auth.log file
    for line in f:
    #{
        #counter for line Information
        lineCounter = lineCounter + 1
       
        ## Search for section. Start new entry
        splitLine = line.split()
        
        ## getting the date
        tmp_month = splitLine[0]
        tmp_day = splitLine[1]
        tmp_time = splitLine[2]
        log_date = datetime.strptime(log_year+" "+tmp_month+" "+tmp_day+" "+tmp_time,"%Y %b %d %X")
        
        ## getting the host
        log_host = splitLine[3]

        ## getting the service (e.g. sshd) and its PID
        service_match = re.search('(.*)\[([0-9]+)\]', splitLine[4])
        if service_match is None:
            print "Error getting service from line "+str(lineCounter)+" segment "+splitLine[4]
            continue
        log_service = service_match.group(1)
        log_service_pid = service_match.group(2)
        
        ## getting the Log ID. Not sure what this number is. Also, getting the type of log and the message
        regExpMatch = re.search('\[ID ([0-9]+) (.*)\] (.*)', line)
        if regExpMatch is None:
            print "Error getting ID from line "+str(lineCounter)+" segment "+line
            continue
        log_ID = regExpMatch.group(1);
        log_type = regExpMatch.group(2);
        log_message = regExpMatch.group(3);

        ## Try to get a "from IP"
        regExpMatch = re.search('from ([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)', log_message)
        log_ip = "?"
        if regExpMatch is not None:
            log_ip = regExpMatch.group(1)
        elif debug == "yes":
            print "[WARNING] No IP found on line: " + str(lineCounter) + " Message = " + log_message
       

        ## Analizing log_messages
        log_message_type = "?"
        
        ##Trying to get accept log_message
        log_accept_type = "?"
        log_user = "?"
        regExpMatch = re.search('Accepted (.*) for (\S+)', log_message) #\S matches any character which is not a Unicode whitespace character
        if regExpMatch is not None:
            log_message_type = "accepted"
            log_accept_type = regExpMatch.group(1)
            log_user = regExpMatch.group(2)
        elif debug == "yes":
            regExpMatch = re.search('Accept', log_message) #\S matches any character which is not a Unicode whitespace character
            if regExpMatch is not None:
                log_message_type = "accepted"
                print "[WARNING] Accept message I couldn't get all the info in line " + str(lineCounter) + " Message = " + log_message

        ##Trying to get Authorize
        regExpMatch = re.search('Authorized to (\S+),', log_message) #\S matches any character which is not a Unicode whitespace character
        if regExpMatch is not None:
            log_message_type = "authorized"
            log_user = regExpMatch.group(1)
        elif debug == "yes":
            regExpMatch = re.search('Authorized', log_message) #\S matches any character which is not a Unicode whitespace character
            if regExpMatch is not None:
                log_message_type = "authorized"
                print "[WARNING] Authorized Message with no user " + str(lineCounter) + " Message = " + log_message

        ## Trying to get refused connection message
        regExpMatch = re.search('refused', log_message) #\S matches any character which is not a Unicode whitespace character
        if regExpMatch is not None:
            log_message_type = "refused"

        ##If log_message not identified do not include it and print line info if debug
        if log_message_type == "?":
            if debug == "yes":
                print "[WARNING] Line " + str(lineCounter) + " contain no known message: " + log_message
        else:
            new_value = [str(log_date), log_host, log_service, log_service_pid, log_ID, log_type, log_message_type, log_accept_type, log_user, log_ip]
            values_to_dump.append(new_value)
    #}
    ## dump the log if there is anything otherwhise mention that there is nothing to log
    if len(values_to_dump) != 0:
        arff.dump(fileName+'.arff',values_to_dump,relation="authLogs",names=['date','host','service','servicePid','ID','logType','messageType','acceptType', 'user', 'ip'])
    elif debug == "yes":
        print "[INFO] Nothing to log"


def main():
    if len(sys.argv) == 1:
        print "use: ./auth2arff.py --year <2017> --debug <yes|no> --files <file1> <file2> <file3> ... \n Try also -h for help"
        quit()

    ## Program arguments
    parser = argparse.ArgumentParser()
    parser.add_argument("-f", "--files", default=[], type=str, nargs="+", help="files to be parsed.")
    parser.add_argument("-d", "--debug", default="yes", type=str, help="Prints errors and warnings parsing the file")
    parser.add_argument("-y", "--year", default="2017", type=str, help="Since auth.log has no year in it, we want to add it here")
    
    ## Parsing the arguments
    args = parser.parse_args()
    log_year = args.year
    debug = args.debug
    filenames = args.files

    ## For each file generate ARFF
    for file_name in filenames:
        parseFile(file_name,debug,log_year)

## Main sentinel
if __name__ == "__main__":
    main()
